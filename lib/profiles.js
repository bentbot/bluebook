/**
 * GNU General Public License
 * Creating and handling user profiles.
 *
 * 	Functions include login, creation, and viewing of user profiles.
 *
 * 	Profile.prototype.the 			Define the model and feed prototypes.
 *  Profile.prototype.init 			Used globally to authenticate a user.
 *  Profile.prototype.login 		Creates a new cookie for the user, logging them in to the website.
 *	Profile.prototype.view 			Creates a user profile page, called a 'view'.
 *  Profile.prototype.user 			Returns a user's profile data.
 * 	Profile.prototype.create 		Used for creating a new user.
 *  Profile.prototype.getCodename 	Generates a unique codename.
 * 
 *  First thing's first. Define the prototype 'Profile' function:
**/

var Profile = function () {};


/**
// Profile.prototype.the 
// Define the model and feed prototypes.
///
// This prototype function is needed to 're-define' certain program components for use in this script. 
///
// 	Models: 			Database models 			[ Defined in /lib/model.js ]
// 	Feeds:  			Post feed functions 		[ Defined in /lib/feed.js ]
// 	Friends:  			The friend prototype 		[ Defined in /lib/friends.js ]
**/
var models, reactions, feed, friendship;
Profile.prototype.the = function (models, feeds, friendships) {
	feed = feeds;
	friendship = friendships;
	model = models;
}

/**
// Profile.prototype.init 
// Used globally to authenticate a user.
///
// A cookie is used in the Profile.prototype.init function to authenticate the user each time a page loads. 
// The cookie itself is actually an alphanumeric key stored in the users web browser.
///
// 	Vars: 			Variables which will be passed through the function and returned to the application.
// 	Req:  			An HTTP request object generated by the application on page load.
// 	Callback:  		Returns an error or result which includes a login cookie and profile data.
**/
Profile.prototype.init = function (vars, req, callback) {

	// Check if there is a user cookie set.
	if (req.cookies.user) {
		
		// Convert the Base64 cookie into a string.
		vars.user = atob(req.cookies.user);

		// Grab the user's profile data from the user prototype. 
		Profile.prototype.user(vars.user, function (err, profile) {

			// See if the profile data exists.
			if (profile) {
				
				// Add the user's profile data to the variables
				vars.profile = profile;
				
				// If there is no profile image set, make sure to 
				if (!profile.picture) profile.picture = 'user.png'
				
				// Check the friendship module to see about any new requests.
				friendship.requests( profile._id, function (err, requests) {

					if (requests) vars.requests = requests;

					// Pass the updated vars back to the application (along with any errors).
					callback(err, vars);

				});

			// When there is no profile found, send back an error.
			} else if (!profile) {

				// Return the callback with a 404 error.
				callback({
					code: 404,
					field: 'cookie',
					notif: 'This account does not exist.'
				});

			}

		});
	} else {
		callback(true, vars);
	}
}

/**
// Profile.prototype.login 
// Creates a new cookie for the user, logging them in to the website.
///
// A cookie is used in the Profile.prototype.init function to authenticate the user each time a page loads. 
// The cookie itself is actually an alphanumeric key stored in the users web browser.
///
// 	Email: 			An email address assigned to a user account.
// 	Password:  		The user's password (sent in plaintext).
// 	Callback:  		Returns an error or result which includes a login cookie and profile data.
**/
Profile.prototype.login = function (email, password, callback) {

	// Find one user by matching the provided email address.
	model.Profiles.findOne({ email: email }, function (err, profile) {
		
		// Create empty variables to contain any errors, results, and a cookie.
		var error, result, cookie;
		
		// Check if a profile was found searching for an email address.
		if ( profile ) {

			// Compare the plain-text password with the one stored in the database. [Read about Profile Middleware in /lib/model.js] 
			profile.comparePassword(password, function (err, isMatch) {
				
				// Continue if the password is a complete match.
				if ( isMatch === true ) {

					// Create a cookie, an encoded Base64 alphanumeric key.
					cookie = btoa(profile._id);


					// The database model will help create a profile using the request.
					var loginInstance = new model.Instance();

					// Save the new user into the database.
					model.Instance.findOneAndUpdate({ cookie: cookie }, { cookie: cookie }, { upsert: true }, function (err, responce) {
						if (err) throw (err);
						profile.password = 0;
						result = {
							code: 200,
							cookie: cookie,
							profile: profile,
							notif: 'Login successful!'
						};
						// Send any successful results and errors to the application. 
						callback(error, result);
					});

				// If the password does not match, create an error object.
				} else {
					
					// The error object will be sent back last.
					error = {
						code: 403,
						field: 'password',
						notif: 'The password entered is incorrect'
					};
					// Send any successful results and errors to the application. 
					callback(error, result);
				}

				

			});

		// When no profile is found or an error has occured, return to the application.
		} else if ( err || profile == null ) {

			// An error object is sent as the only callback variable in this circumstance.
			error = {
				code: 400,
				field: 'email',
				notif: 'This account does not exist.'
			};

			callback(error);

		}
	});
}



/**
// Profile.prototype.logout
// Removes a user instance from the database, logging somebody out.
//
///
// 	Cookie: 		The ID of the cookie stored in the users browser
// 	Callback:  		Returns either true or false depending on if a user could be logged out.
**/
Profile.prototype.logout = function (id, callback) {
	model.Instance.find({ cookie: id }).remove(function (err, docs) {
		if (err) throw (err);
		callback(err, docs);
	});
}


/**
// Profile.prototype.view 
// Creates a user profile page, called a 'view'.
///
// The profile page is the most basic view, created by adding together
// a user's profile data & all posts published to their profile.
///
// 	Codename: 		The URL-safe codename saved in a users profile model. Examples may include:  mark.fornier  newfeld7  
// 	Callback:  		Returns a view of the user's public profile & feed (along with any errors).
**/
Profile.prototype.view = function (codename, vars, callback) {
	if (!callback) callback = vars;

	// Find one user by looking for their matching codename to get their profile.
	model.Profiles.findOne({ codename: codename }, function (err, profile) {
		
		// If there is an error or no profile was found, return the callback.
		if ( err || !profile ) {

			var error = {
				code: 404,
				notif: 'Profile not found'
			}

			callback(error);
			return false;

		// Continue only if a valid profile is found.
		} else if ( profile ) {

			// Create a profile feed with the feed.user function. [Read about it in /lib/feed.js]
			feed.user(profile._id, 10, 0, function (err, feed) {

				// Create an error object if no posts were found.
				if (err) {
					var error = {
						code: 404,
						notif: 'No posts found'
					}
				}

				friendship.check( vars.profile._id, profile._id, function ( err, friendshipStatus ) {
					if (err) throw (err);

					// Create a view object with both the profile data and post feed.
					var view = {
						friend: friendshipStatus,
						profile: profile,
						posts: feed
					};

					// Send the view back to the application (along with any errors).
					callback( err, view );

				});

			});
			
		}
	});
}

/**
// Profile.prototype.user 
// Returns a user's profile data.
///
// This 'user data' includes all public entries found in the user's profile :
// alias, picture, occupation, gender, and more [see the Profile schema in /lib/model.js] 
///
// 	ID: 			Anybody's user _id
// 	Callback:  		A user's public profile data along with any errors.
**/
Profile.prototype.user = function (id, callback) {

	// Find one user by searching for a matching ID.
	model.Profiles.findOne({ _id: id }, function (err, profile) {

		// Return an error if no profile is found. 
		if (err) {
			callback({
				code: 400,
				field: 'id',
				notif: 'This account does not exist'
			});

		// Continue if a profile is found
		} else if (profile) {
			
			// Safely zero-out the password. 			
			profile.password = 0;
			
			// Send back the profile data
			callback(err, profile);
		
		} else {

			// Return an a not found error if no profile was found.
			callback({ code: 400, id: id, notif: 'This account does not exist' });
		
		}
	});
}


/**
// Profile.prototype.create
// Used for creating a new user.
///
// Creating a new user is done with a request and callback function.
// The request contains raw information, like a first and last name.
// When a profile is created the callback will send the responce back to the application. 
///
// 	Request: 			request.firstname, request.lastname, request.email, request.password
// 	Callback:  			responce.cookie
**/
Profile.prototype.create = function (request, callback) {
	
	// Check to see if the request is valid.
	if (request) {

		// Create a new alias we will use throughout the website.
		request.alias = request.firstname + ' ' + request.lastname;

		// Set a default profile picture for our new user.
		request.picture = 'user.jpg';
		
		// Create a URL-safe codename with the getCodename prototype. 
		Profile.prototype.getCodename(request, function (err, codename) {
			request.codename = codename;

			// The database model will help create a profile using the request.
			var newUser = new model.Profiles(request);

			// Save the new user into the database.
			newUser.save(function (err, responce) {

				// Check for a valid responce and create a base64 cookie.
				if ( responce && !err ) {

					responce.cookie = btoa(responce._id);
				
					// Send the updated responce along with any errors back to the application. 
					callback(err, responce);

				} else if (err) {
					// The user may already be in the system, try logging in.

					Profile.prototype.login(request.email, request.password, function (loginerr, result) {

						if (responce && result.code == 200) {
							responce.cookie = result.cookie;
						}
						
						// Send the updated responce along with any errors back to the application. 
						callback(loginerr, responce);

					});

				}

				// Send the updated responce along with any errors back to the application. 
				callback(err, responce);
			});
		});
	} else {
		// Return an 'Invalid Entry' error if the requirements are not met.
		callback({ code: 422, notif: 'Invlid entry. Undefined variables: request.firstname, request.lastname, request.email, request.password'})
	}
}

/**
// Profile.prototype.getCodename
// Generates a unique codename.
///
// Profile URLs are codenames stored in the database.
// Codenames are unique alphanumeric strings making them URL-safe.
///
// 	Request: 			request.firstname, request.lastname, optional: request.codename
// 	Callback:  			request.codename = liam.hogan | andrew.jackson.5 | laurenfowler7
**/
Profile.prototype.getCodename = function (request, callback) {
	
	// Check for requirements
	if (request && request.firstname && request.lastname) {

		// Check if request.codename is not already set to generate a one.
		if (!request.codename) {
			request.codename = request.firstname.toLowerCase() + '.' + request.lastname.toLowerCase();
		}

		// Count any codenames which may match the one already given or created.
		model.Profiles.count({ codename: request.codename }, function (err, count) {
			if (err) throw (err);

			// If there are already matching codenames, then
			if (count > 0) {

				// create a more unique codename by appending a random number.
				var append = parseInt(Math.random() * count * 10);
					request.codename = request.codename + '.' + append;

				// Send the altered codename back to the function to re-check
				Profile.prototype.getCodename(request, callback);
			
			} else {

				// If the codename is unique, proceed to the callback
				callback(err, request.codename);
			
			}

		});	

	} else {
		// Return an 'Invalid Request' error if the requirements are not met.
		callback({ code: 422, notif: 'Invalid request. Undefined varialbles: request.firstname, request.lastname' })
	}

}

// Export the module to the main application.
module.exports = new Profile();